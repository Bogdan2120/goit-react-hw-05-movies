{"version":3,"file":"static/js/497.61cb3c81.chunk.js","mappings":"iRA6BA,EA1BoB,SAAC,EAAD,GAA+B,IAA5BA,EAA2B,EAA3BA,QAAaC,EAAc,EAAdA,QAClC,GAAKD,EAAL,CAIA,IAAME,EAAWF,EAAQG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC3B,2BACE,oCAAYD,MACZ,qCAAaC,OAFNF,EADkB,IAO7B,OACE,0BACGH,EACGM,IAAAA,QAAAA,SAA0B,cAC1BA,IAAAA,QAAAA,SACgB,IAAnBP,EAAQQ,QACP,yEAEAN,IAjBL,CAqBF,ECID,EAxBoB,WAClB,OAAwCO,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQP,GAAOQ,EAAAA,EAAAA,MAAPR,GACR,GAA8BK,EAAAA,EAAAA,WAAS,GAAvC,eAAOR,EAAP,KAAgBY,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfF,GAAW,GAFI,UAGMG,EAAAA,EAAAA,IAAsBZ,EAAI,YAHhC,OAGTa,EAHS,OAIfN,EAAgBM,GAJD,gDAKNC,EALM,KAKNA,SACTX,IAAAA,OAAAA,QAAwB,qBACxBY,QAAQC,IAAIF,EAASG,KAAKC,SAPX,yBASfT,GAAW,GATI,4EAAH,qDAYhBE,GACD,GAAE,CAACX,KAEG,SAAC,EAAD,CAAaJ,QAASU,EAAaV,QAASC,QAASA,GAC7D,C,8JC3BKsB,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAY,mCAAG,WAAMC,GAAN,yFACHN,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CACNG,MAAAA,KAHsB,uBAClBR,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZU,EAAS,mCAAG,sGACAR,EAASO,IAAI,uBADb,uBACfT,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDAKTW,EAAgB,mCAAG,WAAM5B,GAAN,uFACXmB,EAASO,IAAT,iBAAuB1B,IADZ,cACxBiB,EADwB,yBAEvBA,GAFuB,2CAAH,sDAKhBL,EAAqB,mCAAG,WAAOZ,GAAP,8FAAW6B,EAAX,+BAAiB,GAAjB,SACZV,EAASO,IAAT,iBAAuB1B,GAAvB,OAA4B6B,IADhB,uBAC3BZ,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,qD","sources":["modules/ReviewsList/ReviewsList.jsx","pages/ReviewsPage/ReviewsPage.jsx","services/getMovies.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\n\nconst ReviewsList = ({ results }, { loading }) => {\n  if (!results) {\n    return;\n  }\n\n  const elements = results.map(({ id, author, content }) => (\n    <li key={id}>\n      <p>Author: {author}</p>\n      <p>Reviews: {content}</p>\n    </li>\n  ));\n\n  return (\n    <ul>\n      {loading\n        ? Notiflix.Loading.standard('Loading...')\n        : Notiflix.Loading.remove()}\n      {results.length === 0 ? (\n        <p>No one wants to watch this movie &#128528;</p>\n      ) : (\n        elements\n      )}\n    </ul>\n  );\n};\n\nexport default ReviewsList;\n\nReviewsList.propTypes = {\n  results: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n  loading: PropTypes.bool.isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\n\nimport { getMoviesAdditionally } from 'services/getMovies';\nimport ReviewsList from 'modules/ReviewsList/ReviewsList';\n\nconst ReviewsPage = () => {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesAdditionally(id, '/reviews');\n        setMovieDetails(result);\n      } catch ({ responce }) {\n        Notiflix.Notify.failure('An error occurred');\n        console.log(responce.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [id]);\n\n  return <ReviewsList results={movieDetails.results} loading={loading} />;\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '633bd9c8c9bc68a8c4a40449237d5fcd',\n  },\n});\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const getMoviesDetails = async id => {\n  const data = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMoviesAdditionally = async (id, req = '') => {\n  const { data } = await instance.get(`/movie/${id}${req}`);\n  return data;\n};\n"],"names":["results","loading","elements","map","id","author","content","Notiflix","length","useState","movieDetails","setMovieDetails","useParams","setLoading","useEffect","fetchMovie","getMoviesAdditionally","result","responce","console","log","data","message","instance","axios","baseURL","params","api_key","searchMovies","query","get","getMovies","getMoviesDetails","req"],"sourceRoot":""}