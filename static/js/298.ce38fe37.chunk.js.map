{"version":3,"file":"static/js/298.ce38fe37.chunk.js","mappings":"0RAuCA,EAlCiB,SAAC,EAAD,GAA4B,IAAzBA,EAAwB,EAAxBA,KAAUC,EAAc,EAAdA,QAC5B,GAAKD,EAAL,CAIA,IAAME,EAAWF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACxB,2BACE,gBACEC,IAAI,SACJC,MAAM,QACNC,IACEL,EAAY,6DAC8CA,GACtDM,KAGR,kCAAUL,MACV,uCAAeC,OAXRH,EADe,IAe1B,OACE,0BACGH,EACGW,IAAAA,QAAAA,SAA0B,cAC1BA,IAAAA,QAAAA,SACa,IAAhBZ,EAAKa,QACJ,yEAEAX,IAzBL,CA6BF,ECND,EAxBiB,WACf,OAAwCY,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOb,EAAP,KAAgBkB,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfF,GAAW,GAFI,UAGMG,EAAAA,EAAAA,IAAsBL,EAAI,YAHhC,OAGTM,EAHS,OAIfP,EAAgBO,GAJD,gDAKNC,EALM,KAKNA,SACTZ,IAAAA,OAAAA,QAAwB,qBACxBa,QAAQC,IAAIF,EAASG,KAAKC,SAPX,yBASfT,GAAW,GATI,4EAAH,qDAYhBE,GACD,GAAE,CAACJ,KAEG,SAAC,EAAD,CAAUjB,KAAMe,EAAaf,KAAMC,QAASA,GACpD,C,8JC3BK4B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAY,mCAAG,WAAMC,GAAN,yFACHN,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CACNG,MAAAA,KAHsB,uBAClBR,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZU,EAAS,mCAAG,sGACAR,EAASO,IAAI,uBADb,uBACfT,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDAKTW,EAAgB,mCAAG,WAAMrB,GAAN,uFACXY,EAASO,IAAT,iBAAuBnB,IADZ,cACxBU,EADwB,yBAEvBA,GAFuB,2CAAH,sDAKhBL,EAAqB,mCAAG,WAAOL,GAAP,8FAAWsB,EAAX,+BAAiB,GAAjB,SACZV,EAASO,IAAT,iBAAuBnB,GAAvB,OAA4BsB,IADhB,uBAC3BZ,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,qD","sources":["modules/CastList/CastList.jsx","pages/CastPage/CastPage.jsx","services/getMovies.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\n\nimport noPhoto from 'img/no_photo.jpg';\n\nconst CastList = ({ cast }, { loading }) => {\n  if (!cast) {\n    return;\n  }\n\n  const elements = cast.map(({ cast_id, profile_path, name, character }) => (\n    <li key={cast_id}>\n      <img\n        alt=\"actors\"\n        width=\"120px\"\n        src={\n          profile_path\n            ? `https://www.themoviedb.org/t/p/w300_and_h450_bestv2${profile_path}`\n            : noPhoto\n        }\n      />\n      <p>Name: {name}</p>\n      <p>Character: {character}</p>\n    </li>\n  ));\n  return (\n    <ul>\n      {loading\n        ? Notiflix.Loading.standard('Loading...')\n        : Notiflix.Loading.remove()}\n      {cast.length === 0 ? (\n        <p>Nobody auditioned for this movie &#128528;</p>\n      ) : (\n        elements\n      )}\n    </ul>\n  );\n};\n\nexport default CastList;\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      cast_id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n  loading: PropTypes.bool.isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\n\nimport { getMoviesAdditionally } from 'services/getMovies';\nimport CastList from 'modules/CastList/CastList';\n\nconst CastPage = () => {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesAdditionally(id, '/credits');\n        setMovieDetails(result);\n      } catch ({ responce }) {\n        Notiflix.Notify.failure('An error occurred');\n        console.log(responce.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [id]);\n\n  return <CastList cast={movieDetails.cast} loading={loading} />;\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '633bd9c8c9bc68a8c4a40449237d5fcd',\n  },\n});\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const getMoviesDetails = async id => {\n  const data = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMoviesAdditionally = async (id, req = '') => {\n  const { data } = await instance.get(`/movie/${id}${req}`);\n  return data;\n};\n"],"names":["cast","loading","elements","map","cast_id","profile_path","name","character","alt","width","src","noPhoto","Notiflix","length","useState","movieDetails","setMovieDetails","id","useParams","setLoading","useEffect","fetchMovie","getMoviesAdditionally","result","responce","console","log","data","message","instance","axios","baseURL","params","api_key","searchMovies","query","get","getMovies","getMoviesDetails","req"],"sourceRoot":""}